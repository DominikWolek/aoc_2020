-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Par2 where
import qualified Abs
import Lex
}

%name pIn In
%name pStmt Stmt
%name pListStmt ListStmt
%name pExp2 Exp2
%name pExp1 Exp1
%name pExp3 Exp3
%name pExp Exp
-- no lexer declaration
%monad { Either String } { (>>=) } { return }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }
  L_integ  { PT _ (TI $$) }

%%

Integer :: { Integer }
Integer  : L_integ  { (read ($1)) :: Integer }

In :: { Abs.In }
In : ListStmt { Abs.Input $1 }

Stmt :: { Abs.Stmt }
Stmt : Exp { Abs.SExp $1 }

ListStmt :: { [Abs.Stmt] }
ListStmt : {- empty -} { [] } | Stmt ListStmt { (:) $1 $2 }

Exp2 :: { Abs.Exp }
Exp2 : Exp2 '+' Exp3 { Abs.ExpAdd $1 $3 } | Exp3 { $1 }

Exp1 :: { Abs.Exp }
Exp1 : Exp1 '*' Exp2 { Abs.ExpMul $1 $3 } | Exp2 { $1 }

Exp3 :: { Abs.Exp }
Exp3 : Integer { Abs.ExpLit $1 } | '(' Exp ')' { $2 }

Exp :: { Abs.Exp }
Exp : Exp1 { $1 }
{

happyError :: [Token] -> Either String a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer = tokens
}


-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module Abs where

import Prelude (Char, Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)

data In = Input [Stmt]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stmt = SExp Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp = ExpAdd Exp Exp | ExpMul Exp Exp | ExpLit Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

